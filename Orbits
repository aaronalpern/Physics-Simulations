### ANSWER HERE
def A(pos):
    r = np.linalg.norm(pos)  # Magnitude of position vector
    return -SolarSystemParameters['G'] * SolarSystemParameters["SunMass"] * pos / r**3

def Orbit(params):
  ts = []
  poses = []
  vs = []
  t = 0
  vel = params['initVel']
  pos = params['initPos']  
  while t <= params['T'] and (np.linalg.norm(pos) >= SolarSystemParameters['SunRadius']):
    # Storing position and velocity
    poses.append(pos.copy())
    vs.append(vel.copy())
    ts.append(t)
        
    # Midpoint method
    posmid = pos + 0.5 * vel * params['dt']
    velmid = vel + 0.5 * A(pos) * params['dt']
        
    # Full step update
    t += params['dt']
    pos += velmid * params['dt']
    vel += A(posmid) * params['dt']
   
  return np.array(poses), np.array(vs), np.array(ts)
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
EarthParams = {
    'initPos' : np.array([SolarSystemParameters['EarthOrbitRadius'], 0]),
    'initVel' : np.array([0,SolarSystemParameters['EarthOrbitVelocity']]),
    'dt' : 3600,
    'T' : 3600*24*365.25
}

eposes, evs, ets = Orbit(EarthParams)
eposes = np.array(eposes)
plt.plot(eposes[:, 0], eposes[:, 1], label="Earth's Orbit")
plt.axis('equal')
plt.scatter(0, 0, color='orange', s=800, marker='o', label='Sun')  # Sun at the center
plt.xlabel("X Position (m)")
plt.ylabel("Y Position (m)")
plt.legend(loc='upper right')
plt.title("Earth's Orbit Around the Sun")
plt.grid(True)
plt.show()
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
### ANSWER HERE
from matplotlib import animation
from IPython.display import HTML

def animateMe(positions,fullLine=True):
    # First set up the figure, the axis, and the plot element we want to animate
    fig = plt.figure();
    x_min=np.min(positions[:,0])
    x_max=np.max(positions[:,0])*1.1
    y_min=np.min(positions[:,1])
    y_max=np.max(positions[:,1])*1.1

    ax = plt.axes(xlim=(x_min, x_max), ylim=(y_min, y_max));
    #line, = ax.plot([], [], lw=2);
    line, = ax.plot([], [],'bo', ms=10);
    ax.set_xlabel("x")
    ax.set_ylabel("y")
    plt.axis('scaled')
    plt.close(fig)
    # initialization function: plot the background of each frame
    def init():
        line.set_data([], [])
        return line,

    # animation function.  This is called sequentially
    def animate(i):
        x = positions[:,0]
        y = positions[:,1]
        if fullLine:
            line.set_data(positions[0:i,0], positions[0:i,1])
        else:
            line.set_data(positions[i,0], positions[i,1])
#        line.set_markersize(10)
        return line,

    # call the animator.  blit=True means only re-draw the parts that have changed.
    anim = animation.FuncAnimation(fig, animate, init_func=init,
                                   frames=len(positions), interval=20,
                                   blit=True,repeat=False);
    return anim
steps=np.shape(eposes)[0]

anim=animateMe(eposes[::steps//100],True)
HTML(anim.to_jshtml())
-------------------------------------------------------------------------------------------------------------------------------------------------------------------- 
G = 6.67430e-11  # Gravitational constant (m^3 kg^-1 s^-2)
EarthMass = 5.972e24  # kg
EarthRadius = 6.371e6  # m
GeoPeriod = 24 * 3600  # One day in seconds

GeoRadius = ((G * EarthMass * GeoPeriod**2) / (4 * np.pi**2))**(1/3)
GeoAltitude = GeoRadius - EarthRadius  
GeoVelocity = np.sqrt(G * EarthMass / GeoRadius)  

# Define simulation parameters
SatelliteParams = {
    'initPos': np.array([GeoRadius, 0]),  
    'initVel': np.array([0, GeoVelocity]),  
    'dt': 1,  
    'T': GeoPeriod  
}

# Run orbit simulation
geo_positions, geo_velocities, geo_times = Orbit(SatelliteParams)
geo_positions = np.array(geo_positions)
print(f"Geosynchronous Orbit Altitude: {GeoAltitude/1000:.2f} km")
# Plot the geosynchronous orbit
plt.figure(figsize=(6, 6))
plt.plot(geo_positions[:, 0], geo_positions[:, 1], label="Satellite Orbit")
plt.scatter(0, 0, color='blue', s=300, marker='o', label='Earth')  # Earth at center
plt.axis('equal')
plt.xlabel("X Position (m)")
plt.ylabel("Y Position (m)")
plt.legend(loc="upper right")
plt.title("Geosynchronous Satellite Orbit")
plt.grid(True)
plt.show()

-------------------------------------------------------------------------------------------------------------------------------------------------------------------- 
def TriangleArea(pos1, pos2):
  return 0.5 * abs( pos1[0]*pos2[1] - pos2[0]*pos1[1])

EarthParams = {
    'initPos' : np.array([SolarSystemParameters['EarthOrbitRadius'], 0]),
    'initVel' : np.array([0,SolarSystemParameters['EarthOrbitVelocity']]),
    'dt' : 3600,
    'T' : 3600*24*365
}

eposes, evs, ets = Orbit(EarthParams)

area = np.cumsum([TriangleArea(eposes[i-1],eposes[i])
for i in range(len(eposes))])

plt.plot(np.array(eposes)[:,0],np.array(eposes)[:,1])
plt.axis("scaled")

print(f"0.2T to 0.3T: {-1 * area[int(.2*24*365)] + area[int(0.3*24*365)]}")
print(f"0.6T to 0.7T: {-1 * area[int(.6*24*365)] + area[int(0.7*24*365)]}")

plt.fill([pos[0] for pos in eposes[int(.2*24*365):int(0.3*24*365)]] +
 [0],[pos[1] for pos in eposes[int(.2*24*365):int(0.3*24*365)]] + [0])
plt.fill([pos[0] for pos in eposes[int(.6*24*365):int(0.7*24*365)]] +
 [0],[pos[1] for pos in eposes[int(.6*24*365):int(0.7*24*365)]] + [0])

--------------------------------------------------------------------------------------------------------------------------------------------------------------------
### ANSWER HERE
MercuryParams = {
    'initPos' : np.array([0.0,4.60012e10]),
    'initVel' : np.array([5.898e4,0.0]),
    'T' : 60*60*24*88*1.1,
    'dt' : 60
}

mposes, mevs, mts = Orbit(MercuryParams)

radii = [(pos[0]**2 + pos[1]**2)**0.5 for pos in mposes[1:]]
index = radii.index(min(radii))
print(index)
print(np.array([['x','y','r']]+[[mposes[i+index-2][0], mposes[i+index-2][1],
 (mposes[i+index-2][0]**2 + mposes[i+index-2][1]**2)**0.5] for i in range(6)]))
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
### ANSWER HERE
pos = np.array(mposes)
x = np.float64(pos[index-4:index+7,0])
y = np.float64(pos[index-4:index+7,1])

line = np.polyfit(x,y,2)

xs = np.linspace(x[0], x[-1], 100000)
ys = np.array([line[0]*a**2 + line[1]*a + line[2] for a in xs])

plt.plot(x,y)
plt.plot(xs, ys)
plt.show()

closestX = xs[np.argmax(ys)]
closestY = np.max(ys)
print(f"Closest Distance: {(closestX**2 + closestY**2)**0.5}")
print(f"Angle: {np.arctan(closestX / closestY)}")
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
### ANSWER HERE
def RelA(pos):
  r = (pos[1]**2 + pos[0]**2)**0.5
  cos = pos[0] / r
  sin = pos[1] / r
  force = -1*(SolarSystemParameters['G']*SolarSystemParameters["SunMass"]
              /r**2 + 3.2610353e34/r**4)
  return np.array([cos*force, sin*force])

def RelOrbit(params):
  ts = []
  poses = []
  vs = []
  t = 0
  vel = params['initVel']
  pos = params['initPos']
  while (t <= params['T'] and
   ((pos[0]**2 + pos[1]**2) >=
    SolarSystemParameters['SunRadius']**2)):
    poses += [[pos[0], pos[1]]]
    vs += [[vel[0], vel[1]]]
    ts += [t]
    posmid = pos + 0.5*vel*params['dt']
    velmid = vel + RelA(pos)*params['dt']/2
    tmid = t + params['dt']/2
    t,pos,vel=t+params['dt'],pos+velmid*params['dt'], vel
    + RelA(posmid)*params['dt']
  return poses, vs, ts

MercuryParams = {
    'initPos' : np.array([0.0,4.60012e10]),
    'initVel' : np.array([5.898e4,0.0]),
    'T' : 60*60*24*88*1.1,
    'dt' : 60
}

mposes, mevs, mts = RelOrbit(MercuryParams)

radii = [(pos[0]**2 + pos[1]**2)**0.5 for pos in mposes[1:]]
index = radii.index(min(radii))
print(index)
print(np.array([['x','y','r']]+[[mposes[i+index-2][0],
                                 mposes[i+index-2][1],
 (mposes[i+index-2][0]**2 +
  mposes[i+index-2][1]**2)**0.5] for i in range(6)]))

pos = np.array(mposes)
x = np.float64(pos[index:index+7,0])
y = np.float64(pos[index:index+7,1])

line = np.polyfit(x,y,2)

xs = np.linspace(x[0], x[-1], 100000)
ys = np.array([line[0]*a**2 + line[1]*a + line[2] for a in xs])

plt.plot(x,y)
plt.plot(xs, ys)
plt.show()

closestX = xs[np.argmax(ys)]
closestY = np.max(ys)
print(f"Closest Distance: {(closestX**2 + closestY**2)**0.5}")
print(f"Angle: {np.arctan(closestX / closestY)}")
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
def Transfer(pos1, pos2, T):
    pos1, pos2 = np.array(pos1), np.array(pos2)
    # Compute velocity needed for direct transfer
    velocity = (pos2 - pos1) / T
    return velocity

pos1 = np.array([15e11, 11111111111110, 0]) 
pos2 = np.array([2.28e11, 0, -9999999999])
T = 30 * 24 * 3600 
required_velocity = Transfer(pos1, pos2, T)
print(f"Required Velocity: {required_velocity} m/s")
print("This will surely depend on what cordinate system you are using, but this is just my implementation using x,y,z")
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
