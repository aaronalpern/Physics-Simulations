
----------------------------------------------------------------------------------------------
### ANSWER ME
def poprates(current, params):
  return [params['D']*current[0]*current[1]-params['gamma']*current[0],
          params['a']*current[1]-params['b']*current[1]*current[0]]

def ppsim(params):
  pps = np.empty((int((params['T'])/params['dt'])+2,2))
  t = 0
  i = 1
  pps[0,:] = params['init']
  while t < (params['T']):
    change = poprates(pps[i-1,:], params)
    pps[i,0] = pps[i-1,0] + change[0]*params['dt']
    pps[i,1] = pps[i-1,1] + change[1]*params['dt']
    i = i + 1
    t = t+params['dt']
  return pps

----------------------------------------------------------------------------------------------
### ANSWER ME
params = {
    'a' : 1.0,
    'b' : 0.005,
    'gamma' : 0.6,
    "D" : 0.003,
    'dt' : 0.001,
    'init' : [200,400],
    'T' : 50
}

pops = ppsim(params)
plt.plot([0.001*i for i in range(pops[:,0].shape[0])],pops[:,0])
plt.plot([0.001*i for i in range(pops[:,0].shape[0])],pops[:,1])
plt.xlabel("Time")
plt.ylabel("Count")
plt.legend(['Predator','Prey'])

plt.plot(pops[:,1],pops[:,0])
plt.xlabel("Prey")
plt.ylabel("Predators")
----------------------------------------------------------------------------------------------
### ANSWER ME
params = {
    'a' : 1.0,
    'b' : 0.005,
    'gamma' : 0.6,
    "D" : 0.003,
    'dt' : 0.001,
    'init' : [400,200],
    'T' : 50
}

xs = [50,100,200,400,600,800,1000,1200,1600]
mins = []
for x in xs:
  params['init'] = [x/2,x]
  pops = ppsim(params)
  plt.plot(pops[:,1],pops[:,0])
  plt.xlabel("Prey")
  plt.ylabel("Predators")
  plt.title(x)
  plt.axis('scaled')
  plt.show()
  mins = mins + [np.min(pops[:,1])]

plt.plot(xs,mins)
plt.xlabel('Starting Prey')
plt.ylabel("Minimum Prey During Cycle")
print(mins)
----------------------------------------------------------------------------------------------
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import minimize


# Predator-prey rate equations
def poprates(current, params):
    predators = current[0]
    prey = current[1]
    dFdt = params['D'] * predators * prey - params['gamma'] * predators
    dBdt = params['a'] * prey - params['b'] * prey * predators
    return [dFdt, dBdt]
# Euler method simulation
def ppsim(params):
    steps = int(params['T'] / params['dt'])
    pops = np.zeros((steps, 2))
    pops[0] = params['init']

    for i in range(1, steps):
        change = poprates(pops[i - 1], params)
        pops[i, 0] = pops[i - 1, 0] + change[0] * params['dt']  
        pops[i, 1] = pops[i - 1, 1] + change[1] * params['dt']  

    return pops


# Deviation function for optimizer
def getDeviation(initial_population):
    # Round and keep populations positive
    prey = max(1, round(initial_population[0]))
    predators = max(1, round(initial_population[1]))

    params = {
        'a': 1.0,
        'b': 0.005,
        'gamma': 0.6,
        'D': 0.001,         
        'dt': 0.001,
        'init': [predators, prey], 
        'T': 50
    }

    pops = ppsim(params)
    return np.std(pops[:, 1])  
# Run the optimization
x0 = [200, 400] 
result = minimize(getDeviation, x0, method='Nelder-Mead')
best_init = [round(result.x[0]), round(result.x[1])]
print("Stationary Point Found!")
print(f"Prey: {best_init[0]}, Predator: {best_init[1]}")

# Simulate and plot results
params = {
    'a': 1.0,
    'b': 0.005,
    'gamma': 0.6,
    'D': 0.001,
    'dt': 0.001,
    'init': [best_init[1], best_init[0]],  
    'T': 50
}
pops = ppsim(params)
time = np.arange(0, params['T'], params['dt'])

# Time series plot
plt.plot(time, pops[:, 0], label='Predator')
plt.plot(time, pops[:, 1], label='Prey')
plt.xlabel("Time")
plt.ylabel("Population")
plt.title("Predator & Prey over Time (Stationary Point)")
plt.legend()
plt.grid(True)
plt.show()

# Phase plot
plt.plot(pops[:, 1], pops[:, 0], 'o', markersize=10)  
plt.xlabel("Prey")
plt.ylabel("Predator")
plt.title("Phase Plot (Prey vs Predator)")
plt.grid(True)
plt.show()
----------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
from dataclasses import dataclass, field
from IPython.display import HTML
import random

# --- PARAMETERS ---
size = 50           # Grid size (size x size)
T = 600             # Number of timesteps
deltat = 0.1
cure_time = 5.0
infect_prob = 1.0
death_prob = 0.30
initial_infection_chance = 0.02
initial_population_density = 0.2

# --- PERSON CLASS ---
@dataclass
class Person:
    location: list = field(default_factory=list)
    infected: bool = False
    cured: bool = False
    dead: bool = False
    infected_time: float = 0.0

# --- INITIALIZATION ---
grid = np.zeros((size, size), dtype=int)  # 0: empty, 1: healthy, 2: infected, 3: cured, 4: dead
people = []

for i in range(size):
    for j in range(size):
        if np.random.rand() < initial_population_density:
            person = Person([i, j])
            if np.random.rand() < initial_infection_chance:
                person.infected = True
                grid[i, j] = 2
            else:
                grid[i, j] = 1
            people.append(person)

# --- MOVEMENT FUNCTION ---
def move(loc, grid):
    neighbors = [
        (loc[0] + dx, loc[1] + dy)
        for dx, dy in [(-1,0),(1,0),(0,-1),(0,1)]
        if 0 <= loc[0]+dx < size and 0 <= loc[1]+dy < size
    ]
    random.shuffle(neighbors)
    for ni, nj in neighbors:
        if grid[ni, nj] == 0:
            return [ni, nj]
    return loc

# --- INFECTION FUNCTION ---
def infect_neighbors(loc, grid, people):
    for dx, dy in [(-1,0),(1,0),(0,-1),(0,1)]:
        ni, nj = loc[0]+dx, loc[1]+dy
        if 0 <= ni < size and 0 <= nj < size:
            if grid[ni, nj] == 1 and np.random.rand() < infect_prob:
                grid[ni, nj] = 2
                for p in people:
                    if p.location == [ni, nj]:
                        p.infected = True

# --- SIMULATION LOOP ---
grids = []
labels = []
t = 0

while t < T:
    new_grid = np.copy(grid)
    for person in people:
        if person.dead:
            continue

        # Move
        old_loc = person.location
        new_loc = move(old_loc, grid)
        person.location = new_loc

        if old_loc != new_loc:
            new_grid[old_loc[0], old_loc[1]] = 0
            new_grid[new_loc[0], new_loc[1]] = grid[old_loc[0], old_loc[1]]

        # Infection logic
        if person.infected:
            person.infected_time += deltat
            infect_neighbors(person.location, new_grid, people)
            if person.infected_time > cure_time:
                if np.random.rand() < death_prob:
                    person.dead = True
                    person.infected = False
                    new_grid[person.location[0], person.location[1]] = 4
                else:
                    person.infected = False
                    person.cured = True
                    new_grid[person.location[0], person.location[1]] = 3

    grid = new_grid
    if t % 5 == 0:
        grids.append(np.copy(grid))
        counts = {
            'Healthy': np.sum(grid == 1),
            'Infected': np.sum(grid == 2),
            'Cured': np.sum(grid == 3),
            'Dead': np.sum(grid == 4)
        }
        labels.append(counts)
    t += 1

# --- ANIMATION FUNCTION ---
def GetData(t):
    g = grids[t]
    data = np.zeros_like(g, dtype=float)
    data[g == 1] = 0.2  # healthy: light blue
    data[g == 2] = 1.0  # infected: red
    data[g == 3] = 0.6  # cured: green
    data[g == 4] = 0.1  # dead: gray
    return data

def Animate():
    fig, ax = plt.subplots(figsize=(6, 6))
    plot = ax.imshow(GetData(0), cmap='coolwarm', interpolation='none', vmin=0, vmax=1)
    label_text = ax.text(0.02, 0.98, '', color='black', fontsize=10,
                         verticalalignment='top', transform=ax.transAxes,
                         bbox=dict(facecolor='white', alpha=0.8))
    plt.axis('off')

    def update(frame):
        plot.set_array(GetData(frame))
        counts = labels[frame]
        label_text.set_text(
            f"Healthy: {counts['Healthy']}\nInfected: {counts['Infected']}\nCured: {counts['Cured']}\nDead: {counts['Dead']}")
        return [plot, label_text]

    anim = FuncAnimation(fig, update, frames=len(grids), interval=100, blit=True)
    plt.close()
    return anim

anim = Animate()
HTML(anim.to_jshtml())
